=== miniminimoon_orchestrator.py ===
-rw-r--r--@ 1 recovered  staff    35K Oct  5 13:30 miniminimoon_orchestrator.py
88e595f9c3455d6b0d316a4c0ef445ddbe3a1fe5ad817b368a90791dfcff2817  miniminimoon_orchestrator.py
        Execute comprehensive DECATALOGO evaluation using ExtractorEvidenciaIndustrialAvanzado.
336:class ExecutionContext:
386:def component_execution(component_name: str):
415:class MINIMINIMOONOrchestrator:
768:def main():
794:if __name__ == "__main__":

=== miniminimoon_immutability.py ===
-rw-r--r--@ 1 recovered  staff    26K Oct  5 13:30 miniminimoon_immutability.py
f0873f6de8d7ab47eda733a0df476b07415850d9024df4a62f05516ca168aa1c  miniminimoon_immutability.py
# coding=utf-8
33:class ImmutabilityContract:
611:if __name__ == "__main__":

=== data_flow_contract.py ===
-rw-r--r--@ 1 recovered  staff    30K Oct  5 13:30 data_flow_contract.py
36b4496c3019fd893a6dcdcb50cfd456caeb122650ba1a2fd84a0d06d3fd5c4a  data_flow_contract.py
#!/usr/bin/env python3
30:class DataType(Enum):
53:class ValidationCache:
145:class NodeContract:
200:class CanonicalFlowValidator:

=== decalogo_loader.py ===
-rw-r--r--@ 1 recovered  staff    13K Oct  4 19:02 decalogo_loader.py
bad1a63a1388f06413b40d5f840f6e34961be799295c21b7e83de4df878ee67f  decalogo_loader.py
"""
159:def _atomic_write_json(target_path: Path, data: Any) -> bool:
204:def load_decalogo_industrial(path: Optional[str] = None) -> Dict[str, Any]:
238:def get_decalogo_industrial(path: Optional[str] = None, force_reload: bool = False) -> Dict[str, Any]:
257:if __name__ == "__main__":
268:def ensure_aligned_templates() -> Dict[str, Any]:
297:def get_cluster_metadata(
323:def map_punto_to_cluster(
350:def get_question_by_id(
380:if __name__ == "__main__":

=== Decatalogo_principal.py ===
-rw-r--r--@ 1 recovered  staff   125K Oct  5 09:52 Decatalogo_principal.py
f9cd0628ceee47b6a68012c15162b7dea7b72f56e4a3407d1a400c7f78198efc  Decatalogo_principal.py
# -*- coding: utf-8 -*-
70:class AdvancedDeviceConfig:
109:def get_device_config():
113:def to_device(model):
118:def truncate_text_for_log(text, max_len=500):
122:def get_truncation_logger(name):
126:def log_debug_with_text(logger, text):
130:def log_error_with_text(logger, text):
134:def log_info_with_text(logger, text):
138:def log_warning_with_text(logger, text):
210:class MathematicalInnovations:
372:class NivelAnalisis(Enum):
379:class TipoCadenaValor(Enum):
388:class TipoEvidencia(Enum):
397:class TeoriaCambioAvanzada:
603:class EslabonCadenaAvanzado:
696:class OntologiaPoliticasAvanzada:
1176:class DimensionDecalogoAvanzada:
1652:def cargar_decalogo_industrial_avanzado() -> List[DimensionDecalogoAvanzada]:
1930:class ClusterMetadataAvanzada:
1989:class DecalogoContextoAvanzado:

=== plan_processor.py ===
-rw-r--r--@ 1 recovered  staff    33K Oct  4 19:02 plan_processor.py
a884a2f6327c89b76b251af8c67dd4775832a2756032acfb905a525f74d9034c  plan_processor.py
"""
31:def load_decalogo_structure():
47:class PlanProcessor:

=== plan_sanitizer.py ===
-rw-r--r--@ 1 recovered  staff    11K Oct  4 19:02 plan_sanitizer.py
c45fdbae9db29098e4679d909e40eee4457777191d5e3e8ee15fe30e3fd4c41c  plan_sanitizer.py
"""
73:class PlanSanitizer:
282:def create_plan_sanitizer(preserve_structure: bool = True, tag_key_elements: bool = True) -> PlanSanitizer:
300:if __name__ == "__main__":
342:def sanitize_plan_name(plan_name: str, max_length: int = 255) -> str:
347:def standardize_json_keys(
354:def create_plan_directory(plan_name: str, base_path: str = ".") -> str:

=== responsibility_detector.py ===
-rw-r--r--@ 1 recovered  staff    22K Oct  4 19:02 responsibility_detector.py
5ac7f1bf65dce8bbd0b3917e84b1962f09d924016b0ec6235b030be58dc7d3ba  responsibility_detector.py
"""
42:class EntityType(Enum):
51:class ResponsibilityEntity:
91:class ResponsibilityDetector:
501:def create_responsibility_detector(model_name: str = "es_core_news_sm") -> ResponsibilityDetector:
515:if __name__ == "__main__":

=== teoria_cambio.py ===
-rw-r--r--@ 1 recovered  staff    37K Oct  4 19:02 teoria_cambio.py
b03066edf2f59c5568a8a372671fe83836507b6001ae68b6cfbe7e66e2303644  teoria_cambio.py
"""
46:class CausalElementType(Enum):
57:class LogicModelQuality(Enum):
66:class CausalElement:
101:class LogicModelValidationResult:
135:class TeoriaCambio:
730:def extract_causal_elements_from_text(text: str) -> List[CausalElement]:
842:def evaluar_teoria_cambio(text: str) -> Dict[str, Any]:
887:if __name__ == "__main__":

=== dag_validation.py ===
-rw-r--r--@ 1 recovered  staff    61K Oct  5 09:58 dag_validation.py
9cd0dba642e816987dce2156bce03b34fb4e0c2f0705bd27a7ff9977136dd7b0  dag_validation.py
# coding=utf-8
77:class GraphType(Enum):
97:class StatisticalTest(Enum):
120:class AdvancedGraphNode:
173:class MonteCarloAdvancedResult:
216:class HypothesisTestResult:
233:def _create_advanced_seed(plan_name: str, salt: str = "") -> int:
258:class AdvancedDAGValidator:
1317:def _simple_seed_from_plan_name(plan_name: str) -> int:
1325:def _create_seed_from_plan_name(self, plan_name: str) -> int:
1330:def _initialize_rng(self, plan_name: str, salt: str = "") -> None:
1338:def _is_acyclic(self, nodes: Dict[str, AdvancedGraphNode]) -> bool:
1366:def _generate_random_subgraph(
1378:def calculate_acyclicity_pvalue(
1465:def verify_reproducibility(self, plan_name: str, iterations: int = 50) -> bool:
1476:def get_graph_stats(self) -> Dict[str, int]:
1497:def create_complex_causal_graph() -> AdvancedDAGValidator:
1562:def create_sample_causal_graph() -> AdvancedDAGValidator:
1580:class DAGValidationSuite:
1630:def demonstrate_advanced_features():
1683:if __name__ == "__main__":

=== causal_pattern_detector.py ===
-rw-r--r--@ 1 recovered  staff    16K Oct  5 03:13 causal_pattern_detector.py
004d702f017c58478046684ba8f2561a28893bee8c0b50a9891df9e4cf5f7142  causal_pattern_detector.py
import pandas as pd
11:class PDETCausalPatternDetector:
349:def create_pdet_causal_detector(municipalities_file: str = "pdet_municipalities.txt"):
359:def integrate_with_miniminimoon():

=== contradiction_detector.py ===
-rw-r--r--@ 1 recovered  staff    15K Oct  5 09:11 contradiction_detector.py
a7db9af7748a5e01cccb7b77346e27533804ee7ef47da73a3af1633b7e3bf266  contradiction_detector.py
# coding=utf-8
30:class RiskLevel(Enum):
38:class ContradictionMatch:
52:class ContradictionAnalysis:
61:class ContradictionDetector:
373:if __name__ == "__main__":

=== monetary_detector.py ===
-rw-r--r--@ 1 recovered  staff    33K Oct  4 19:02 monetary_detector.py
35724ee4c619f572f5a89f439775922428194126db228523cd4686c5acef0dfb  monetary_detector.py
"""
29:class MonetaryCategory(Enum):
41:class FinancialTimeframe(Enum):
51:class MonetaryMatch:
95:class MonetaryAnalysis:
137:class MonetaryDetector:
775:def create_monetary_detector() -> MonetaryDetector:
786:if __name__ == "__main__":

=== feasibility_scorer.py ===
-rw-r--r--@ 1 recovered  staff    79K Oct  4 19:02 feasibility_scorer.py
6c9959dd824806e656a0d690c67cf228fe0620d8d98dbc65c8030e76e8e7f94d  feasibility_scorer.py
"""
46:class ComponentType(Enum):
59:class DetectionResult:
97:class IndicatorScore:
142:class SafeWriteResult:
150:def safe_write_text(path: Path, content: str, label: str = "text", encoding: str = "utf-8") -> SafeWriteResult:
165:def safe_write_bytes(path: Path, content: bytes, label: str = "binary") -> SafeWriteResult:
180:def safe_write_json(path: Path, data: Any, label: str = "json") -> SafeWriteResult:
190:class FeasibilityScorer:
1757:if __name__ == "__main__":
1830:def main():
2000:def audit_performance_hotspots() -> Dict[str, List[str]]:
2019:if __name__ == "__main__":

=== evidence_registry.py ===
-rw-r--r--@ 1 recovered  staff    11K Oct  5 09:11 evidence_registry.py
e849c4274d01cc4966f5a3a994b2b55ace2acca40ab9a59c459f951a0e1db498  evidence_registry.py
#!/usr/bin/env python3
27:class CanonicalEvidence:
66:class EvidenceRegistry:

=== questionnaire_engine.py ===
-rw-r--r--@ 1 recovered  staff    80K Oct  5 09:11 questionnaire_engine.py
7e864bd7c374756eb247d83dfd8fa5ab11a98d07583539c10c38ebc2e25dc21d  questionnaire_engine.py
#!/usr/bin/env python3
26:class ScoringModality(Enum):
36:class ScoreBand(Enum):
64:class QuestionnaireStructure:
82:class ThematicPoint:
93:class SearchPattern:
101:class ScoringRule:
109:class BaseQuestion:
122:class EvaluationResult:
143:class DimensionScore:
154:class PointScore:
165:class GlobalScore:
179:class QuestionLibrary:
990:class ScoringEngine:
1126:class QuestionnaireEngine:
1892:def get_questionnaire_engine() -> QuestionnaireEngine:
1904:if __name__ == "__main__":

