digraph CICDPipeline {
    graph [bgcolor="#0a0e27", fontname="JetBrains Mono", fontsize=12, rankdir=TB, splines=ortho, pad=0.5, nodesep=0.8, ranksep=1.2];
    node [fontname="JetBrains Mono", fontsize=10, style="filled,rounded", shape=box, margin=0.3];
    edge [fontname="JetBrains Mono", fontsize=9, arrowsize=0.8];

    // Title
    label=<
        <table border="0" cellborder="0" cellspacing="0">
            <tr><td><font point-size="24" color="#00ff88"><b>üöÄ CI/CD PIPELINE</b></font></td></tr>
            <tr><td><font point-size="12" color="#00d4ff">Complete Build Workflow with Freeze Verification, Triple-Run Tests, and Artifact Archival</font></td></tr>
        </table>
    >;
    labelloc="t";

    // Trigger
    trigger [label="üîî Pull Request\nTrigger", shape=ellipse, fillcolor="#ff00ff", color="#ff00ff", fontcolor="#000000", penwidth=3, style="filled"];

    // Stage 1: Setup
    subgraph cluster_setup {
        label=<
            <font color="#00ffff"><b>üì¶ STAGE 1: SETUP</b></font>
        >;
        style=filled;
        fillcolor="#1a1f35";
        color="#00ffff";
        penwidth=2;

        checkout [label=<
            <table border="0" cellborder="0" cellspacing="0" cellpadding="6">
                <tr><td><font color="#ffffff"><b>Checkout Code</b></font></td></tr>
                <tr><td><font color="#00ffff">git clone</font></td></tr>
            </table>
        >, fillcolor="#2a1f3a", color="#00ffff"];

        python_setup [label=<
            <table border="0" cellborder="0" cellspacing="0" cellpadding="6">
                <tr><td><font color="#ffffff"><b>Setup Python 3.9+</b></font></td></tr>
                <tr><td><font color="#00ffff">Install dependencies</font></td></tr>
            </table>
        >, fillcolor="#2a1f3a", color="#00ffff"];

        spacy_model [label=<
            <table border="0" cellborder="0" cellspacing="0" cellpadding="6">
                <tr><td><font color="#ffffff"><b>Download spaCy Model</b></font></td></tr>
                <tr><td><font color="#00ffff">es_core_news_sm</font></td></tr>
            </table>
        >, fillcolor="#2a1f3a", color="#00ffff"];
    }

    // Stage 2: Freeze Verification
    freeze_stage [label=<
        <table border="0" cellborder="1" cellspacing="0" cellpadding="10" bgcolor="#1a3040" color="#ff00ff">
            <tr><td bgcolor="#ff00ff"><font color="#000000"><b>üîí STAGE 2: FREEZE VERIFICATION</b></font></td></tr>
            <tr><td align="left"><font color="#ffffff"><b>Command:</b> python miniminimoon_cli.py freeze</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ Generate .immutability_snapshot.json</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ SHA-256 hash of configs</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ Validate frozen state</font></td></tr>
            <tr><td align="left"><font color="#00ffff"><b>‚úì Gate #1 Prerequisite</b></font></td></tr>
        </table>
    >, fillcolor="#1a3040", color="#ff00ff", penwidth=3];

    // Stage 3: Build
    build_stage [label=<
        <table border="0" cellborder="1" cellspacing="0" cellpadding="10" bgcolor="#1a2435" color="#00ff88">
            <tr><td bgcolor="#00ff88"><font color="#000000"><b>üî® STAGE 3: BUILD</b></font></td></tr>
            <tr><td align="left"><font color="#ffffff"><b>Compile Components</b></font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ py_compile all modules</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ Verify syntax</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ Check imports</font></td></tr>
            <tr><td align="left"><font color="#00ffff"><b>Duration:</b> ~30s</font></td></tr>
        </table>
    >, fillcolor="#1a2435", color="#00ff88", penwidth=2];

    // Stage 4: Lint
    lint_stage [label=<
        <table border="0" cellborder="1" cellspacing="0" cellpadding="10" bgcolor="#1a2435" color="#00ff88">
            <tr><td bgcolor="#00ff88"><font color="#000000"><b>üìè STAGE 4: LINT</b></font></td></tr>
            <tr><td align="left"><font color="#ffffff"><b>PEP 8 Compliance</b></font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ py_compile validation</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ Style check</font></td></tr>
            <tr><td align="left"><font color="#00ffff"><b>Duration:</b> ~15s</font></td></tr>
        </table>
    >, fillcolor="#1a2435", color="#00ff88", penwidth=2];

    // Stage 5: Triple-Run Reproducibility
    triple_run [label=<
        <table border="0" cellborder="1" cellspacing="0" cellpadding="10" bgcolor="#1a3050" color="#ffff00">
            <tr><td bgcolor="#ffff00"><font color="#000000"><b>üîÑ STAGE 5: TRIPLE-RUN REPRODUCIBILITY</b></font></td></tr>
            <tr><td align="left"><font color="#ffffff"><b>Determinism Verification</b></font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ Run 1: evidence_hash_1, flow_hash_1</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ Run 2: evidence_hash_2, flow_hash_2</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ Run 3: evidence_hash_3, flow_hash_3</font></td></tr>
            <tr><td align="left"><font color="#00ffff">‚ñ∏ Verify: hash_1 == hash_2 == hash_3</font></td></tr>
            <tr><td align="left"><font color="#ff00ff"><b>‚úì Gate #3 Validation</b></font></td></tr>
            <tr><td align="left"><font color="#00ffff"><b>Duration:</b> ~3min</font></td></tr>
        </table>
    >, fillcolor="#1a3050", color="#ffff00", penwidth=3];

    // Stage 6: Unit Tests
    unit_tests [label=<
        <table border="0" cellborder="1" cellspacing="0" cellpadding="10" bgcolor="#1a2435" color="#00d4ff">
            <tr><td bgcolor="#00d4ff"><font color="#000000"><b>üß™ STAGE 6: UNIT TESTS</b></font></td></tr>
            <tr><td align="left"><font color="#ffffff"><b>Component Tests</b></font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ pytest test_*.py -v</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ All detectors + validators</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ Embedding model tests</font></td></tr>
            <tr><td align="left"><font color="#00ffff"><b>Duration:</b> ~1min</font></td></tr>
        </table>
    >, fillcolor="#1a2435", color="#00d4ff", penwidth=2];

    // Stage 7: Integration Tests
    integration_tests [label=<
        <table border="0" cellborder="1" cellspacing="0" cellpadding="10" bgcolor="#1a2435" color="#00d4ff">
            <tr><td bgcolor="#00d4ff"><font color="#000000"><b>üîó STAGE 7: INTEGRATION TESTS</b></font></td></tr>
            <tr><td align="left"><font color="#ffffff"><b>End-to-End Validation</b></font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ verify_critical_flows.py</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ 72 critical flows</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ All 6 gates verified</font></td></tr>
            <tr><td align="left"><font color="#00ffff"><b>Duration:</b> ~2min</font></td></tr>
        </table>
    >, fillcolor="#1a2435", color="#00d4ff", penwidth=2];

    // Stage 8: Performance Gate
    perf_gate [label=<
        <table border="0" cellborder="1" cellspacing="0" cellpadding="10" bgcolor="#1a1f40" color="#ff00ff">
            <tr><td bgcolor="#ff00ff"><font color="#000000"><b>‚ö° STAGE 8: PERFORMANCE GATE</b></font></td></tr>
            <tr><td align="left"><font color="#ffffff"><b>Contract Validation Performance</b></font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ p95 latency < budget + 10%</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ Mathematical invariants check</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ Block performance regressions</font></td></tr>
            <tr><td align="left"><font color="#00ffff"><b>Threshold:</b> ~5ms p95</font></td></tr>
        </table>
    >, fillcolor="#1a1f40", color="#ff00ff", penwidth=2];

    // Stage 9: Artifact Archival
    artifact_stage [label=<
        <table border="0" cellborder="1" cellspacing="0" cellpadding="10" bgcolor="#1a3040" color="#ffff00">
            <tr><td bgcolor="#ffff00"><font color="#000000"><b>üì¶ STAGE 9: ARTIFACT ARCHIVAL</b></font></td></tr>
            <tr><td align="left"><font color="#ffffff"><b>Archive Build Artifacts</b></font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ answers_report.json</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ evidence_registry.json</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ flow_runtime.json</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ final_results.json</font></td></tr>
            <tr><td align="left"><font color="#ffff00">‚ñ∏ coverage_report.json</font></td></tr>
            <tr><td align="left"><font color="#00ffff"><b>Retention:</b> 30 days</font></td></tr>
        </table>
    >, fillcolor="#1a3040", color="#ffff00", penwidth=3];

    // Success/Failure
    success [label="‚úÖ BUILD\nSUCCESS\n\nReady to Merge", shape=octagon, fillcolor="#00ff88", color="#00ff88", fontcolor="#000000", penwidth=4, style="filled", fontsize=12];
    failure [label="‚ùå BUILD\nFAILED\n\nBlock PR", shape=octagon, fillcolor="#ff0000", color="#ff0000", fontcolor="#ffffff", penwidth=4, style="filled", fontsize=12];

    // Flow
    trigger -> checkout [label="1:1", color="#ff00ff", fontcolor="#ff00ff", penwidth=2];
    checkout -> python_setup [color="#00ffff", penwidth=2];
    python_setup -> spacy_model [color="#00ffff", penwidth=2];
    spacy_model -> freeze_stage [color="#00ffff", penwidth=2];

    freeze_stage -> build_stage [label="PASS", color="#00ff88", fontcolor="#00ff88", penwidth=3, style="bold"];
    build_stage -> lint_stage [label="PASS", color="#00ff88", fontcolor="#00ff88", penwidth=2];
    lint_stage -> triple_run [label="PASS", color="#00ff88", fontcolor="#00ff88", penwidth=3, style="bold"];
    triple_run -> unit_tests [label="PASS", color="#ffff00", fontcolor="#ffff00", penwidth=3, style="bold"];
    unit_tests -> integration_tests [label="PASS", color="#00d4ff", fontcolor="#00d4ff", penwidth=2];
    integration_tests -> perf_gate [label="PASS", color="#00d4ff", fontcolor="#00d4ff", penwidth=2];
    perf_gate -> artifact_stage [label="PASS", color="#ff00ff", fontcolor="#ff00ff", penwidth=2];
    artifact_stage -> success [label="PASS", color="#00ff88", fontcolor="#00ff88", penwidth=4, style="bold"];

    // Failure paths
    freeze_stage -> failure [label="FAIL", color="#ff0000", fontcolor="#ff0000", penwidth=2, style="dashed"];
    build_stage -> failure [label="FAIL", color="#ff0000", fontcolor="#ff0000", penwidth=2, style="dashed"];
    lint_stage -> failure [label="FAIL", color="#ff0000", fontcolor="#ff0000", penwidth=2, style="dashed"];
    triple_run -> failure [label="FAIL", color="#ff0000", fontcolor="#ff0000", penwidth=3, style="dashed"];
    unit_tests -> failure [label="FAIL", color="#ff0000", fontcolor="#ff0000", penwidth=2, style="dashed"];
    integration_tests -> failure [label="FAIL", color="#ff0000", fontcolor="#ff0000", penwidth=2, style="dashed"];
    perf_gate -> failure [label="FAIL", color="#ff0000", fontcolor="#ff0000", penwidth=2, style="dashed"];
}
