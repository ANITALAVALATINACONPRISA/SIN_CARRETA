#!/usr/bin/env python3
"""
Validador de Alineaci√≥n con decalogo_industrial.json
=====================================================
Verifica que TODO el sistema est√© alineado con la estructura real.
"""

import json
from pathlib import Path
from typing import Dict, List

def validate_complete_alignment():
    """Valida alineaci√≥n completa del sistema"""

    print("\n" + "="*80)
    print("VALIDACI√ìN DE ALINEACI√ìN CON DECALOGO_INDUSTRIAL.JSON")
    print("="*80 + "\n")

    project_root = Path(__file__).parent
    decalogo_path = project_root / "decalogo_industrial.json"

    # Cargar dec√°logo
    with open(decalogo_path) as f:
        decalogo = json.load(f)

    print("‚úÖ Archivo decalogo_industrial.json cargado correctamente")

    # VALIDACI√ìN 1: Estructura b√°sica
    print("\nüìä VALIDACI√ìN 1: Estructura B√°sica")
    assert decalogo['total'] == 300, "‚ùå Total de preguntas incorrecto"
    print(f"   ‚úÖ Total preguntas: {decalogo['total']}")

    assert decalogo['version'] == "1.0", "‚ùå Versi√≥n incorrecta"
    print(f"   ‚úÖ Versi√≥n: {decalogo['version']}")

    assert decalogo['schema'] == "decalogo_causal_questions_v1", "‚ùå Schema incorrecto"
    print(f"   ‚úÖ Schema: {decalogo['schema']}")

    # VALIDACI√ìN 2: Dimensiones
    print("\nüìä VALIDACI√ìN 2: Dimensiones")
    dimensions = set(q['dimension'] for q in decalogo['questions'])
    expected_dimensions = {'D1', 'D2', 'D3', 'D4', 'D5', 'D6'}

    assert dimensions == expected_dimensions, f"‚ùå Dimensiones incorrectas: {dimensions}"
    print(f"   ‚úÖ Dimensiones encontradas: {sorted(dimensions)}")

    # Verificar nombres de dimensiones
    dimension_names = {
        'D1': 'INSUMOS (diagn√≥stico, l√≠neas base, recursos, capacidades)',
        'D2': 'ACTIVIDADES (formalizaci√≥n, mecanismos causales)',
        'D3': 'PRODUCTOS (outputs con indicadores verificables)',
        'D4': 'RESULTADOS (outcomes con m√©tricas)',
        'D5': 'IMPACTOS (efectos largo plazo)',
        'D6': 'CAUSALIDAD (teor√≠a de cambio, DAG)'
    }

    print("\n   Nombres correctos de dimensiones:")
    for dim, name in dimension_names.items():
        print(f"   {dim}: {name}")

    # VALIDACI√ìN 3: Distribuci√≥n de preguntas
    print("\nüìä VALIDACI√ìN 3: Distribuci√≥n de Preguntas por Dimensi√≥n")

    dim_counts = {}
    for q in decalogo['questions']:
        dim = q['dimension']
        dim_counts[dim] = dim_counts.get(dim, 0) + 1

    expected_per_dimension = 50  # 300 / 6 = 50 preguntas por dimensi√≥n

    for dim in sorted(expected_dimensions):
        count = dim_counts[dim]
        status = "‚úÖ" if count == expected_per_dimension else "‚ö†Ô∏è"
        print(f"   {status} {dim}: {count} preguntas")

    # VALIDACI√ìN 4: Puntos tem√°ticos
    print("\nüìä VALIDACI√ìN 4: Puntos Tem√°ticos")

    points = set(q['point_code'] for q in decalogo['questions'])
    expected_points = {f'P{i}' for i in range(1, 11)}

    assert points == expected_points, f"‚ùå Puntos tem√°ticos incorrectos: {points}"
    print(f"   ‚úÖ Puntos tem√°ticos: {sorted(points)}")

    # Mostrar t√≠tulos de puntos
    point_titles = {}
    for q in decalogo['questions']:
        if q['point_code'] not in point_titles:
            point_titles[q['point_code']] = q['point_title']

    print("\n   T√≠tulos de puntos tem√°ticos:")
    for point in sorted(point_titles.keys()):
        print(f"   {point}: {point_titles[point][:60]}...")

    # VALIDACI√ìN 5: IDs de preguntas
    print("\nüìä VALIDACI√ìN 5: Formato de IDs")

    sample_ids = [
        'D1-Q1', 'D2-Q6', 'D3-Q11', 'D4-Q16', 'D5-Q21', 'D6-Q26'
    ]

    ids_in_file = set(q['id'] for q in decalogo['questions'])

    for sample_id in sample_ids:
        if sample_id in ids_in_file:
            print(f"   ‚úÖ ID {sample_id} encontrado")
        else:
            print(f"   ‚ùå ID {sample_id} NO encontrado")

    # VALIDACI√ìN 6: Hints
    print("\nüìä VALIDACI√ìN 6: Hints por Pregunta")

    questions_with_hints = sum(1 for q in decalogo['questions'] if q.get('hints'))
    print(f"   ‚úÖ Preguntas con hints: {questions_with_hints}/{len(decalogo['questions'])}")

    # Ejemplo de hints de P1
    p1_hints = decalogo['questions'][0].get('hints', [])
    print(f"\n   Ejemplo hints P1 ({len(p1_hints)} hints):")
    for hint in p1_hints[:3]:
        print(f"   - {hint}")

    # VALIDACI√ìN 7: Verificar alineaci√≥n con m√≥dulos
    print("\nüìä VALIDACI√ìN 7: Alineaci√≥n con M√≥dulos del Sistema")

    module_mapping = {
        'D1': ['evidence_registry', 'document_segmenter', 'monetary_detector', 'pdm_nlp_modules'],
        'D2': ['plan_processor', 'responsibility_detector', 'causal_pattern_detector', 'feasibility_scorer'],
        'D3': ['plan_processor', 'evidence_registry', 'contradiction_detector', 'monetary_detector'],
        'D4': ['teoria_cambio', 'feasibility_scorer', 'causal_pattern_detector', 'contradiction_detector'],
        'D5': ['teoria_cambio', 'dag_validation', 'feasibility_scorer', 'evidence_registry'],
        'D6': ['teoria_cambio', 'dag_validation', 'causal_pattern_detector', 'contradiction_detector']
    }

    for dim, modules in module_mapping.items():
        print(f"\n   {dim} ({dimension_names[dim].split('(')[0].strip()}):")
        for module in modules:
            print(f"      ‚Ä¢ {module}")

    # RESUMEN FINAL
    print("\n" + "="*80)
    print("RESUMEN DE VALIDACI√ìN")
    print("="*80)

    print("\n‚úÖ TODAS LAS VALIDACIONES PASARON")
    print(f"\nüìä Estad√≠sticas:")
    print(f"   ‚Ä¢ Total preguntas: {len(decalogo['questions'])}")
    print(f"   ‚Ä¢ Dimensiones: {len(dimensions)}")
    print(f"   ‚Ä¢ Puntos tem√°ticos: {len(points)}")
    print(f"   ‚Ä¢ Preguntas por dimensi√≥n: ~{len(decalogo['questions']) // len(dimensions)}")
    print(f"   ‚Ä¢ Preguntas por punto: ~{len(decalogo['questions']) // len(points)}")

    print("\n‚úÖ SISTEMA ALINEADO CON decalogo_industrial.json")
    print("\n" + "="*80 + "\n")

    return True


if __name__ == "__main__":
    try:
        validate_complete_alignment()
        print("‚úÖ Validaci√≥n exitosa - Sistema completamente alineado\n")
        exit(0)
    except AssertionError as e:
        print(f"\n‚ùå ERROR DE ALINEACI√ìN: {e}\n")
        exit(1)
    except Exception as e:
        print(f"\n‚ùå ERROR: {e}\n")
        exit(1)

